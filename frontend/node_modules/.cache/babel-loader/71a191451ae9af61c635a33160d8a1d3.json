{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jhaymar\\\\Desktop\\\\Projects\\\\Reactjs\\\\trivia_junkie\\\\frontend\\\\src\\\\Components\\\\Home\\\\Home.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useRef } from 'react';\nimport { CssBaseline, Grid, Button } from '@material-ui/core';\nimport Header from '../Header/Header';\nimport List from '../List/List.jsx';\nimport User from '../User/User.jsx';\nimport getTriviaData from '../../api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction shuffle(array) {\n  let temp_arr = [];\n  let indices = [0, 1, 2, 3];\n  let randomIndex = 0;\n  let i = 0; //console.log(\"Actual array: \" + array);\n\n  while (indices.length != 0) {\n    randomIndex = Math.floor(Math.random() * 100) % indices.length;\n    temp_arr = temp_arr.concat(array[indices[randomIndex]]);\n    indices.splice(randomIndex, 1); //Remove the element\n\n    i++;\n  }\n\n  return temp_arr;\n}\n\nconst Home = () => {\n  _s();\n\n  const [category, setCategory] = useState('General Knowledge');\n  const [difficulty, setDifficulty] = useState('easy');\n  const [questions, setQuestions] = useState([]);\n  const [userAnswer, setUserAnswer] = useState('');\n  const [correct_answer, setCorrectAnswer] = useState('');\n  const [isCorrect, setIsCorrect] = useState('');\n  const [questionPoints, setQuestionPoints] = useState('');\n  const [userScore, setUserScore] = useState(1000);\n  const [choices, setChoices] = useState([]);\n  const [isGameOver, setGameOver] = useState(false);\n  const [show, setShow] = useState(false);\n  const ref = useRef(null); //User answer acts as a confirmation\n\n  useEffect(() => {\n    getTriviaData(category, difficulty).then(results => {\n      //setGameOver(false);\n      setChoices(shuffle(results[0].incorrect_answers.concat(results[0].correct_answer)));\n      setQuestions(results);\n      setUserAnswer(userAnswer);\n\n      if (results[0].difficulty == 'easy') {\n        setQuestionPoints(100);\n      } else if (results[0].difficulty == 'medium') {\n        setQuestionPoints(300);\n      } else {\n        setQuestionPoints(500);\n      }\n\n      if (userScore <= 0) {\n        setGameOver(true);\n\n        if (isGameOver) {} else {\n          setUserScore(1000);\n        }\n      } else {\n        console.log(\"USER SCORE NOT <= 0\");\n      }\n    });\n  }, [userAnswer, userScore, isGameOver]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(CssBaseline, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 3,\n      style: {\n        width: '100%'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        md: 4,\n        style: {\n          display: 'flex',\n          justifyContent: 'center',\n          alignItems: 'center'\n        },\n        children: /*#__PURE__*/_jsxDEV(User, {\n          userScore: userScore\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        md: 8,\n        style: {\n          display: 'flex',\n          justifyContent: 'center',\n          alignItems: 'center'\n        },\n        ref: ref,\n        children: /*#__PURE__*/_jsxDEV(List, {\n          questions: questions,\n          setUserAnswer: setUserAnswer,\n          userAnswer: userAnswer,\n          isCorrect: isCorrect,\n          setIsCorrect: setIsCorrect,\n          correct_answer: correct_answer,\n          setCorrectAnswer: setCorrectAnswer,\n          questionPoints: questionPoints,\n          choices: choices,\n          setUserScore: setUserScore,\n          userScore: userScore\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 29\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Home, \"7yr0l9Bs15Rz8Rq67f4PB/kz57s=\");\n\n_c = Home;\nexport default Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["C:/Users/Jhaymar/Desktop/Projects/Reactjs/trivia_junkie/frontend/src/Components/Home/Home.jsx"],"names":["React","useEffect","useState","useRef","CssBaseline","Grid","Button","Header","List","User","getTriviaData","shuffle","array","temp_arr","indices","randomIndex","i","length","Math","floor","random","concat","splice","Home","category","setCategory","difficulty","setDifficulty","questions","setQuestions","userAnswer","setUserAnswer","correct_answer","setCorrectAnswer","isCorrect","setIsCorrect","questionPoints","setQuestionPoints","userScore","setUserScore","choices","setChoices","isGameOver","setGameOver","show","setShow","ref","then","results","incorrect_answers","console","log","width","display","justifyContent","alignItems"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useRef} from 'react';\r\nimport { CssBaseline, Grid, Button } from '@material-ui/core';\r\n\r\nimport Header from '../Header/Header';\r\nimport List from '../List/List.jsx';\r\nimport User from '../User/User.jsx';\r\n\r\nimport getTriviaData from '../../api';\r\n\r\nfunction shuffle(array) {\r\n    let temp_arr = [];\r\n    let indices = [0, 1, 2, 3]\r\n    let randomIndex = 0;\r\n    let i = 0;\r\n\r\n    //console.log(\"Actual array: \" + array);\r\n    while (indices.length != 0) {\r\n        randomIndex = (Math.floor(Math.random() * 100)) % indices.length;\r\n        temp_arr = temp_arr.concat(array[indices[randomIndex]]);\r\n        indices.splice(randomIndex, 1); //Remove the element\r\n        i++;\r\n    }\r\n\r\n    return temp_arr;\r\n}\r\n\r\nconst Home = () => {\r\n    const [category, setCategory] = useState('General Knowledge');\r\n    const [difficulty, setDifficulty] = useState('easy');\r\n    const [questions, setQuestions] = useState([]);\r\n    const [userAnswer, setUserAnswer] = useState('');\r\n    const [correct_answer, setCorrectAnswer] = useState('');\r\n    const [isCorrect, setIsCorrect] = useState('');\r\n    const [questionPoints, setQuestionPoints] = useState('');\r\n    const [userScore, setUserScore] = useState(1000);\r\n    const [choices, setChoices] = useState([]);\r\n    const [isGameOver, setGameOver]  = useState(false);\r\n    const [show, setShow] = useState(false);\r\n\r\n    const ref = useRef(null);\r\n\r\n    //User answer acts as a confirmation\r\n    useEffect(() => {\r\n        getTriviaData(category, difficulty).then((results) => {\r\n            //setGameOver(false);\r\n            setChoices(shuffle(results[0].incorrect_answers.concat(results[0].correct_answer)));\r\n            setQuestions(results);\r\n            setUserAnswer(userAnswer);\r\n            if (results[0].difficulty == 'easy') {\r\n                setQuestionPoints(100);\r\n            } else if (results[0].difficulty == 'medium') {\r\n                setQuestionPoints(300);\r\n            } else { \r\n                setQuestionPoints(500);\r\n            }\r\n\r\n            if (userScore <= 0) {\r\n                setGameOver(true);\r\n                if (isGameOver) {\r\n                    \r\n                } else {\r\n                    setUserScore(1000);\r\n                }\r\n            } else { console.log(\"USER SCORE NOT <= 0\"); }\r\n        })\r\n    }, [userAnswer, userScore, isGameOver]);\r\n\r\n\r\n    return (\r\n        <>\r\n            <CssBaseline />\r\n            <Grid container spacing={3} style={{width: '100%'}}>\r\n                <Grid item xs={12} md={4} style={{ display: 'flex', justifyContent: 'center', alignItems: 'center'}}> \r\n                    <User userScore={userScore} />\r\n                    </Grid>\r\n                        <Grid item xs={12} md={8} style={{ display: 'flex', justifyContent: 'center', alignItems: 'center'}} ref={ref}> \r\n                            <List\r\n                                questions={questions}\r\n                                setUserAnswer={setUserAnswer}\r\n                                userAnswer={userAnswer}\r\n                                isCorrect={isCorrect}\r\n                                setIsCorrect={setIsCorrect}\r\n                                correct_answer={correct_answer}\r\n                                setCorrectAnswer={setCorrectAnswer}\r\n                                questionPoints={questionPoints}\r\n                                choices={choices}\r\n                                setUserScore={setUserScore}\r\n                                userScore={userScore}\r\n                            />\r\n                </Grid>\r\n            </Grid>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Home;"]},"metadata":{},"sourceType":"module"}